#+STARTUP: overview
* User Details
#+begin_src emacs-lisp
;;; config.el -*- lexical-binding: t; -*-
;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets
(setq user-full-name "Eugene Rwagasore"
      user-mail-address "mail@rwagasore.com")
#+end_src

* Sane Defaults
#+begin_src emacs-lisp
;; Optimize garbage collection for better startup performance
(setq gc-cons-threshold (* 50 1000 1000)) ; 50MB (default is ~800KB)

;; Reset GC threshold after startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (setq gc-cons-threshold (* 2 1000 1000)))) ; 2MB after startup

(setq-default
 delete-by-moving-to-trash t
 window-combination-resize t)

(setq mac-mouse-wheel-smooth-scroll t)

;; Increase amount of data read from process
(setq read-process-output-max (* 1024 1024)) ;; 1mb

;; Hide menu-bar
(menu-bar-mode -1)

;; Remove gaps between your emacs frames and other windows
(setq frame-resize-pixelwise t)

;; Allow internal emacs to use posix shell and vterm to user fish
(setq shell-file-name (executable-find "bash"))
(setq-default vterm-shell "/opt/homebrew/bin/fish")
(setq-default explicit-shell-file-name "/opt/homebrew/bin/fish")

;; Set Scratch to org-mode as default
(setq initial-major-mode 'org-mode)

;; autosave - optimized intervals for better performance
(auto-save-visited-mode t)
(setq auto-save-timeout 20)  ; 20 seconds instead of 1
(setq auto-save-interval 200) ; 200 keystrokes instead of 50
(setq auto-save-visited-file-name t)
(setq default-directory "~")

;; Improve the modeline and Icons
(setq nerd-icons-scale-factor 1)
(setq doom-modeline-height 32)

;; Remap the keybinding to open xwidget browser
(map! :leader
      :desc "Open XWidget Browser URL" "o b" #'xwidget-webkit-browse-url)

(setq ns-use-srgb-colorspace nil)
#+end_src

* Font Rendering
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Pragmasevka Nerd Font" :style "Regular"  :size 14)
       doom-big-font (font-spec :family "Pragmasevka Nerd Font" :style "Regular" :size 18)
       default-text-properties '(line-spacing 0 line-height 1 style "Retina"))
#+end_src
* Theme Configurations
#+begin_src emacs-lisp
(defun my/apply-theme (appearance)
  "Load theme, taking current system APPEARANCE into consideration."
  (mapc #'disable-theme custom-enabled-themes)
  (pcase appearance
    ('light (load-theme 'era t))
    ('dark (load-theme 'ijima t))))

;; Setup system appearance handling with proper guards
(when (featurep 'ns) ; Only on macOS
  (add-hook 'ns-system-appearance-change-functions #'my/apply-theme)
  (when (boundp 'ns-system-appearance)
    (my/apply-theme ns-system-appearance)))

(after! heaven-and-hell
  (setq heaven-and-hell-themes
        '((light . era)
          (dark . ijima)))
  (setq heaven-and-hell-load-theme-no-confirm t)
  (map! :g "C-c t T" 'heaven-and-hell-toggle-theme))

(add-hook 'after-init-hook 'heaven-and-hell-init-hook)

(after! doom-theme
  (doom-themes-org-config)
  (doom-themes-visual-bell-config)
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
#+end_src

* UI Configurations
#+begin_src emacs-lisp
;; Disable Emacs killing confirmation
(setq confirm-kill-emacs nil)

;; transparent adjustment
(set-frame-parameter (selected-frame) 'alpha '(100 . 96))
(add-to-list 'default-frame-alist '(alpha . (100 . 96)))

;; remove title bar but round the window
(add-to-list 'default-frame-alist '(undecorated-round . t))

;; Maximize the window to fullscreen
(add-to-list 'initial-frame-alist '(fullscreen . maximized))

;; Customize the cursor
(setq-default
 cursor-type '(bar . 1)
 blink-cursor-delay 0
 blink-cursor-interval 0.4)

;; Default fringe size for all frames
(fringe-mode '(3 . 3))
(setq-default indicate-empty-lines t)

(blink-cursor-mode t)

;; Disable fringe-mode on xwidget
(defun no-fringes-config ()
  "Used in `window-configuration-change-hook' to configure fringes"
  (set-window-fringes nil 0 0))

(defun xwidget-webkit-no-fringes-hook ()
  "Custom `xwidget-webkit-mode' behariours."
  (setq header-line-format nil)
  (add-hook 'window-configuration-change-hook
            'no-fringes-config nil :local))

(add-hook 'xwidget-webkit-mode-hook 'xwidget-webkit-no-fringes-hook)

;; User relative line numbers only in prog-mode
(setq display-line-numbers-type 'relative)
(add-hook 'prog-mode-hook #'display-line-numbers-mode)


;; Customise modeline
(setq doom-modeline-modal-icon nil
      doom-modeline-modal-modern-icon nil)

;; remove abbreviation
(after! evil
  (setq evil-normal-state-tag   "NORMAL"
        evil-insert-state-tag   "INSERT"
        evil-visual-state-tag   "VISUAL"
        evil-replace-state-tag  "REPLACE"
        evil-operator-state-tag "OPERATOR"
        evil-emacs-state-tag    "EMACS"
        evil-motion-state-tag   "MOTION"))
#+end_src

* Languages Configurations
** Org Mode Configurations
#+begin_src emacs-lisp
(after! org

  (use-package! org-superstar
    :hook (org-mode . org-superstar-mode)
    :config
    (setq org-superstar-headline-bullets-list '("⁖")
          org-superstar-item-bullet-alist '((?- . "•") (?+ . "•") (?* . "•"))
          org-hide-leading-stars t
          org-superstar-leading-bullet " "))

  (setq org-ellipsis " ... "
        org-todo-keyword-faces
        '(("NOW" :foreground "#7c7c75" :weight normal :underline t)
          ("LATER" :foreground "#9f7efe" :weight normal :underline t)
          ("NEXT" :foreground "#0098dd" :weight normal :underline t)
          ("DONE" :foreground "#50a14f" :weight normal :underline t)
          ("CANCELLED" :foreground "#ff6480" :weight normal :underline t))
        org-priority-faces '((65 :foreground "#e45649")
                             (66 :foreground "#da8548")
                             (67 :foreground "#0098dd"))
        org-todo-keywords
        '((sequence "LATER(l)" "NOW(n)" "NEXT(N)" "|" "DONE(d)" "CANCELLED(c)")
          (sequence "[ ](t)" "[-](s)" "[?](w)" "|" "[X](x)"))))

#+end_src
** Web Mode Configurations
#+begin_src emacs-lisp
(after! web-mode
  (setq indent-tabs-mode nil
      web-mode-attr-indent-offset nil
      js-indent-level 2
      typescript-indent-level 2
      tab-width 2
      web-mode-code-indent-offset 2
      web-mode-css-indent-offset 2
      web-mode-markup-indent-offset 2
      web-mode-enable-auto-closing t
      web-mode-enable-auto-pairing t
      web-mode-auto-close-style 2
      web-mode-tag-auto-close-style 2))
#+end_src
** Rust Mode Configurations
#+begin_src emacs-lisp
(after! rustic
  (setq rustic-format-on-save t))
#+end_src
* Clients Configurations
** LSP
#+begin_src emacs-lisp
(after! eglot
  (setq eglot-code-action-indications nil))
#+end_src
** Company
#+begin_src emacs-lisp
(after! company
  ;; disable inline previews
  (delq 'company-preview-if-just-one-frontend company-frontends)
  (setq company-idle-delay 0.0
        company-minimum-prefix-length 1)
  (setq company-show-numbers t))
#+end_src
** Whitespace
#+begin_src emacs-lisp
(after! whitespace
  (setq whitespace-line-column 120  ; Standard column width
        whitespace-style
        '(face tabs spaces trailing lines space-before-tab newline indentation
          empty space-after-tab space-mark tab-mark newline-mark)))

;; Enable whitespace mode only for smaller files to avoid performance issues
(defun my/selective-whitespace-mode ()
  "Enable whitespace-mode only for files smaller than 100KB."
  (when (< (buffer-size) (* 100 1024))
    (whitespace-mode 1)))

(add-hook! 'prog-mode-hook #'my/selective-whitespace-mode)
#+end_src
** Magit
#+begin_src emacs-lisp
;; Remove `--literal-pathspecs` argument which was causing `pre-commit` to fail
(after! magit
  (setq magit-git-global-arguments (remove "--literal-pathspecs" magit-git-global-arguments)))
#+end_src
** Claude Code IDE
#+begin_src emacs-lisp
(use-package! claude-code-ide
  :config
  (setq claude-code-ide-use-side-window nil
        claude-code-ide-focus-claude-after-ediff nil
        claude-code-ide-switch-tab-on-ediff nil
        claude-code-ide-show-claude-window-in-ediff nil
        claude-code-ide-vterm-anti-flicker t)
  (claude-code-ide-emacs-tools-setup))

(map! :leader :desc "Claude Code IDE menu" "." #'claude-code-ide-menu)
#+end_src
