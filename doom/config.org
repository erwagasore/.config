#+STARTUP: overview
* User Details
#+begin_src emacs-lisp
;;; config.el -*- lexical-binding: t; -*-
;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets
(setq user-full-name "Eugene Rwagasore"
      user-mail-address "mail@rwagasore.com")
#+end_src

* Sane Defaults
#+begin_src emacs-lisp
(setq-default
 delete-by-moving-to-trash t
 window-combination-resize t)

(setq mac-mouse-wheel-smooth-scroll t)

;; Increase amount of data read from process
(setq read-process-output-max (* 1024 1024)) ;; 1mb

;; Hide menu-bar
(menu-bar-mode -1)

;;
(setq shell-file-name  (executable-find "fish"))
(setq-default vterm-shell (executable-find "fish"))

;; Set Scratch to org-mode as default
(setq initial-major-mode 'org-mode)

;; autosave
(auto-save-visited-mode t)
(setq auto-save-timeout 1)
(setq auto-save-interval 50)
(setq auto-save-visited-file-name t)
(setq default-directory "~")
#+end_src

* Font Rendering
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Iosevka SS08" :weight 'Regular  :size 15)
       doom-big-font (font-spec :family "Iosevka SS08" :weight 'Regular :size 24)
       default-text-properties '(line-spacing 0 line-height 1 style "Retina"))
#+end_src

* Theme Configurations
#+begin_src emacs-lisp
(defun my/apply-theme (appearance)
  "Load theme, taking current system APPEARANCE into consideration."
  (mapc #'disable-theme custom-enabled-themes)
  (pcase appearance
    ('light (load-theme 'era t))
    ('dark (load-theme 'ijima t))))

(add-hook 'ns-system-appearance-change-functions #'my/apply-theme)

(after! heaven-and-hell
  (setq heaven-and-hell-themes
        '((light . era)
          (dark . ijima)))
  ;; Optionall, load themes without asking for confirmation.
  (setq heaven-and-hell-load-theme-no-confirm t)
  (map! :g "C-c t T" 'heaven-and-hell-toggle-theme))

(add-hook 'after-init-hook 'heaven-and-hell-init-hook)

(after! doom-theme
  (doom-themes-org-config)
  (doom-themes-visual-bell-config)
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
#+end_src
* UI Configurations
#+begin_src emacs-lisp
;; Disable Emacs killing confirmation
(setq confirm-kill-emacs nil)

;transparent adjustment
 (set-frame-parameter (selected-frame) 'alpha '(100 . 92))
 (add-to-list 'default-frame-alist '(alpha . (100 . 92)))

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type nil)

;; remove title bar but round the window
(add-to-list 'default-frame-alist '(undecorated-round . t))
;; enable transparent titlebar with dark-mode
;; (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))

;; Maximize the window to fullscreen
(add-to-list 'initial-frame-alist '(fullscreen . maximized))

;; Customize the cursor
(setq-default
 cursor-type '(bar . 1)
 blink-cursor-delay 0
 blink-cursor-interval 0.4
 x-stretch-cursor t)

(blink-cursor-mode t)

;; Disable fringe-mode on xwidget
(defun no-fringes-config ()
  "Used in `window-configuration-change-hook' to configure fringes"
  (set-window-fringes nil 0 0))

(defun xwidget-webkit-no-fringes-hook ()
  "Custom `xwidget-webkit-mode' behaviours."
  (setq header-line-format nil)
  (add-hook 'window-configuration-change-hook
            'no-fringes-config nil :local))

(add-hook 'xwidget-webkit-mode-hook 'xwidget-webkit-no-fringes-hook)
#+end_src

* Languages Configurations
** Org Mode Configurations
#+begin_src emacs-lisp
(after! org
  (setq org-roam-dailies-directory "journals/"
        org-roam-dailies-capture-templates
        '(("d" "default"
           entry (file "~/Documents/vault/templates/daily.org")
           :target (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n")
           :unnarrowed t))
        ;; roam directory and templates
        org-roam-directory "~/Documents/vault"
        org-roam-capture-templates
        '(("d" "default"
           plain "%?"
           :target (file+head "pages/${slug}.org" "#+title: ${title}\n")
           :unnarrowed t))))
#+end_src
** Java Mode Configurations
#+begin_src emacs-lisp
(add-hook 'java-mode-hook 'eglot-java-mode)
#+end_src
** Web Mode Configurations
#+begin_src emacs-lisp
(setq indent-tabs-mode nil
      web-mode-attr-indent-offset nil
      js-indent-level 2
      typescript-indent-level 2
      tab-width 2
      web-mode-code-indent-offset 2
      web-mode-css-indent-offset 2
      web-mode-markup-indent-offset 2

      web-mode-enable-auto-closing t
      web-mode-enable-auto-pairing t
      web-mode-auto-close-style 2
      web-mode-tag-auto-close-style 2)
#+end_src
* Clients Configurations
** LSP
#+begin_src emacs-lisp
(after! lsp
  (setq lsp-log-io nil
        lsp-idle-delay 0.5
        lsp-enable-file-watchers nil
        lsp-eslint-auto-fix-on-save t))

(with-eval-after-load 'eglot
  (add-to-list 'eglot-server-programs
               '((js-mode typescript-mode typescript-tsx-mode) . (eglot-deno "deno" "lsp")))

  (defclass eglot-deno (eglot-lsp-server) ()
    :documentation "A custom class for deno lsp.")

  (cl-defmethod eglot-initialization-options ((server eglot-deno))
    "Passes through required deno initialization options"
    (list :enable t :lint t)))
#+end_src
** Company
#+begin_src emacs-lisp
(after! company
  ;; disable inline previews
  (delq 'company-preview-if-just-one-frontend company-frontends)
  (setq company-idle-delay 0.0
        company-minimum-prefix-length 1)
  (setq company-show-numbers t))
#+end_src
** Magit
#+begin_src emacs-lisp
;; Remove `--literal-pathspecs` argument which was causing `pre-commit` to fail
(after! magit
  (setq magit-git-global-arguments (remove "--literal-pathspecs" magit-git-global-arguments)))
#+end_src

** GPTEl

#+begin_src emacs-lisp
(after! gptel
  (setq gptel-model "llama3.1:latest"
        gptel-default-mode `org-mode
        gptel-backend (gptel-make-ollama "Ollama"
                        :host "localhost:11434"
                        :stream t
                        :models '("llama3.2:latest"))))

(map! "C-c o x" #'gptel)
#+end_src

** Indent Guides
#+begin_src emacs-lisp
(after! highlight-indent-guides
  (setq highlight-indent-guides-delay 0
        highlight-indent-guides-method 'character
        highlight-indent-guides-responsive 'stack
        highlight-indent-guides-suppress-auto-error t))
#+end_src
